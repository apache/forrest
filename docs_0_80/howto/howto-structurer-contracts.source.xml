<?xml version="1.0" encoding="ISO-8859-1"?><!--
  Copyright 2002-2005 The Apache Software Foundation or its licensors,
  as applicable.

  Licensed under the Apache License, Version 2.0 (the "License");
  you may not use this file except in compliance with the License.
  You may obtain a copy of the License at

      http://www.apache.org/licenses/LICENSE-2.0

  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.
--><document><header>
  <title>How to write a forrest:contract?</title>
  <abstract>
    This How-To will explain how we wrote the contracts for the dispatcher and hope afterwards you will be able to do the same.
  </abstract>
  <last-modified-content-date date="2005-07-17"/>
 </header><body><section id="Intended Audience"><title>Intended Audience</title>
<warning>
The "Dispatcher" (aka "Views") is new functionality which is still in development phase. That is why it is in the
"whiteboard" section of the Forrest distribution. This HowTo is a good start but still needs more work.
</warning>
    <p>
      Devs and skin developer that wants to get started with forrest:contract development. 
      To really understand this how-to you need basic and sometimes advanced understanding of 
      the "old fashion" skin development process.
    </p>
    <note>
       For the moment we will use a special seed template called seed-v2. We still 
        need to fix issues of the dispatcher that it really can replace old 
        fashion skins. Like performance, standalone contracts, other testing output/input formats - using POJO based 
        processing will help solving this.  All this will ATM happen in the v2 seed-target till the dispatcher will 
        be realesed to the stable plugins. So make regular updates of your forrest-trunk to keep track.
    </note>
    <warning>
      The way we develope contracts will/may change with introduction of java based processing rather then xsl. Please keep this in mind
        and help updating the documentation by sending patches. TIA. ;-)
    </warning>
  </section><section id="Purpose"><title>Purpose</title>
    <p>
      This setup guide will explain how to create a forrest:contract from scratch and 
      how this forrest:contract work with the core parts of forrest.
    </p>
  </section><section id="Prerequisites"><title>Prerequisites</title>
    <ul>
      <li>
        You have a ready-to-go new seed-v2 (v2) based on the dispatcher like described in <a href="site:howto/dispatcher/install">Install</a>.
      </li>
      <li>
        Reading that how-to is as well a good idea to understand the used directory structure in this how-to.
      </li>
      <li>Installing a mozilla browser and the forrestbar helps a lot in developing.</li>
    </ul>
  </section><section id="Steps"><title>Steps</title>
    <note>The following content is from many mails around the topic, this how-to tries to be the 
      consolidation of this thread. It is mainly based on the thread "[RT] Why using views" - 
      in comparison with "old fashion" skins - usecase i18n</note>
    <p>
      By working on the i18n integration for "pelt" we again encountered the reasons for using the dispatcher. ;-)
      The maintenance problem was to change the captions of the skin features (contracts) to enable
      support for i18n. The case is that the <code>site2xhtml.xsl</code> has a lot of repeating code. 
    </p>
    <p>
      For example the "last-publish"-contract could be found 2 times in the code.  
      This is not the only contract that was (is) doubled in the code. The problem with that is that 
      we needed to search the code for each caption and senselessly repeat the following 
      maintenance step of adding the &lt;i18n:text/&gt;-tags.
    </p>
    <source xml:space="preserve">

- &lt;script language="JavaScript"
- type="text/javascript"&gt;document.write("Published: " + document.lastModified);&lt;/script&gt;

+ &lt;script type="text/javascript"&gt;document.write("&lt;i18n:text &gt;Last
+ Published:&lt;/i18n:text&gt;&amp;#160;" + document.lastModified);

    </source>
    <section id="enhanceMaintenance">
      <title>Enhance the maintenance</title>
      <p>Now we can enhance the maintenance for the future and we give these code snippets 
        contracts names (based on their functionality). This naming enables us to keep
the contract separate from the position code itself. In xsl you would
simply do:
      </p>
      <ol>
        <li>replace the script by &lt;xsl:call-template name="siteinfo-last-published"/&gt;</li>
        <li>and add:</li>
      </ol>
      
      <source xml:space="preserve">&lt;xsl:template name="siteinfo-last-published"&gt;
 &lt;script type="text/javascript"&gt;
  document.write("&lt;i18n:text &gt;Last Published:&lt;/i18n:text&gt;&amp;#160;" + document.lastModified);
 &lt;/script&gt;
&lt;/xsl:template&gt;
      </source>
      <p>
        This allows us in a next maintenance to just change the code of
        &lt;xsl:template name="siteinfo-last-published"/&gt; and apply it in any position where
        it is placed.  
      </p>
      <note>
        Now this refactoring of the site2xhtml.xsl is exactly what we doing in creating contracts for the dispatcher.
      </note>
    </section>
    <section id="blankContract">
      <title>Explaining the blank forrest:contract</title>
      <p>
        To start a new forrest:contract you can copy the 'blank.ft' from
        <code>org.apache.forrest.plugin.output.themer/resources/themes/common/html/blank.ft</code>. 
      </p>
      <p>
        The 'blank.ft' is a simple xml file with the following code which you can use to base new contracts 
        on:
      </p>
      <source xml:space="preserve">
&lt;forrest:contract 
  xmlns:i18n="http://apache.org/cocoon/i18n/2.1"
  xmlns:forrest="http://apache.org/forrest/templates/1.0"
  name="blank" type="nugget"&gt;
  
  &lt;!--NOTE: 
    When using the blank template as c'n p master just search and replace 'blank' by the {contract-name}!--&gt;
  
  &lt;description&gt;
    {contract-name} will output {contract-funtion}. This is just a blank contract, it will output *nothing*.
  &lt;/description&gt;
  &lt;usage&gt;&lt;![CDATA[&lt;forrest:contract name="blank"/&gt;]]&gt;&lt;/usage&gt;
  &lt;forrest:template xmlns:forrest="http://apache.org/forrest/templates/1.0"
    format="html" name="blank" inputFormat="xsl" body="false" head="false"&gt;
    &lt;xsl:stylesheet version="1.1" 
        xmlns:xsl="http://www.w3.org/1999/XSL/Transform"&gt;
        &lt;!--
          Add here the needed templates.
          Remember to set the forrest:template @attributes!
          --&gt;
         &lt;!--
        &lt;xsl:template name="blank-head"&gt;
        &lt;/xsl:template&gt;
        &lt;xsl:template name="blank-body"&gt;
        &lt;/xsl:template&gt;
        --&gt;
    &lt;/xsl:stylesheet&gt;
  &lt;/forrest:template&gt;
&lt;/forrest:contract&gt;
      </source>
      <p>
        The most important is the name of the contract <code>&lt;forrest:contract name="blank"/&gt;</code>. 
        This name is the same as the file name of the contract (without file extension) <code>blank.ft</code>. 
      </p>
      <note>This is a <strong>naming convention</strong> that you need
        to always meet. All @name attributes must be the file name of the contract without file extension.
      </note>
      <p>
        The <code>&lt;description/&gt;</code> tag needs to be filled in with some information
        that is explaining the contract to the webdesigner. The better explained the more efficient
        for the webdesigner to pick the right contract.
      </p>
      <source xml:space="preserve">&lt;description&gt;
  siteinfo-last-published-howto will output the last published date of the site with the help of jscript.
&lt;/description&gt;
      </source>
      <p>
        In the <code>&lt;usage/&gt;</code> tag we have to explain how the designer can use 
        the contract in his structurer.
      </p>
      <source xml:space="preserve">&lt;usage&gt;&lt;![CDATA[&lt;forrest:contract name="siteinfo-last-published-howto"/&gt;]]&gt;&lt;/usage&gt;
      </source>
      <p>
        <code>&lt;forrest:template name="blank" body="false" head="false"&gt; </code> 
        That leads to the template attribute @body="true" and
        @head="false". In html a contract can add content to the &lt;body/&gt; or/and
        &lt;head/&gt; part of &lt;html/&gt;. These values need to be changed when adding an actual template.
        Besides this, a xsl-template needs to indicate this in the naming. A template that adds content to the 
        html body needs to end with "<code>-body</code>"!!!
      </p>
      <warning>
        The last paragraph about &lt;forrest:template name="blank" body="false" head="false"&gt; is due to change. 
        Please be aware that this part of the dispatcher is the main moving target right now!!!
      </warning>
      <note>
        It is possible to use contracts in different in/output formats. 
        We are focussing for now on format="html" as output and the inputFormat="xsl".
      </note>
      <p>
        A &lt;forrest:template /&gt; has the child &lt;xsl:stylesheet/&gt; where we can create 
        templates for the html-head and html-body. For adding content into the body of the final 
        document change @body="true" and add:
      </p>
      <source xml:space="preserve">
&lt;xsl:stylesheet version="1.1" 
 xmlns:xsl="http://www.w3.org/1999/XSL/Transform"&gt;
 &lt;!--Add here the needed templates--&gt;
 &lt;xsl:template name="blank-body"/&gt;
&lt;/xsl:stylesheet&gt;        
      </source>
    </section>
    <section id="newContract">
      <title>Create a new contract</title>
      <note>
        We use basic naming convention for contracts. Like
        "naming does not say anything about layout position, but functionality of the contract".
      </note>
      <p> 
        Now let us pick up the example we started with and create a "siteinfo-last-published-howto" contract.
        Save the blank.ft to <code>{project.home}/src/documentation/resources/themes/common/html/siteinfo-last-published-howto.ft</code>.
      </p>
      <p>
        Now the maintenance-optimized code (xpath="/html/body/*") was:
      </p>
      <source xml:space="preserve">
&lt;xsl:template name="siteinfo-last-published"&gt;
 &lt;script type="text/javascript"&gt;
  document.write("&lt;i18n:text &gt;Last Published:&lt;/i18n:text&gt;&amp;#160;" + document.lastModified);
 &lt;/script&gt;
&lt;/xsl:template&gt;</source>
      <p>
        In this code we have to do the following steps to use it in our contract:
      </p>
      <ul>
        <li>Search and replace "siteinfo-last-published" with "siteinfo-last-publish-howto-body"</li>
        <li>Add a "debug string - " to the template</li>
      </ul>
      <p>
        The contract after this steps should look like:
      </p>
      <source xml:space="preserve">
&lt;xsl:template name="siteinfo-last-publish-howto-body"&gt;
debug string - 
 &lt;script type="text/javascript"&gt;
  document.write("&lt;i18n:text &gt;Last Published:&lt;/i18n:text&gt;&amp;#160;" + document.lastModified);
 &lt;/script&gt;
&lt;/xsl:template&gt;</source>
      <p>Now we have to do some last steps in the siteinfo-last-publish-howto.ft</p>
      <ul>
        <li>Search and replace "blank" with "siteinfo-last-publish-howto"</li>
        <li>Add description and usage of the contract</li>
        <li>Set @body="true"</li>
        <li>Copy the maintenance optimized code to the contract.</li>
      </ul>
      <p>
        As the result your code should look like this:
      </p>
      <source xml:space="preserve">&lt;forrest:contract xmlns:forrest="http://apache.org/forrest/templates/1.0"
  name="siteinfo-last-published-howto" type="nugget"&gt;
  &lt;description&gt;
    siteinfo-last-published-howto will output the last published date of the site with the help of jscript.
  &lt;/description&gt;
  &lt;usage&gt;&lt;![CDATA[&lt;forrest:contract name="siteinfo-last-published-howto"/&gt;]]&gt;&lt;/usage&gt;
  &lt;forrest:template 
    xmlns:i18n="http://apache.org/cocoon/i18n/2.1"
    xmlns:forrest="http://apache.org/forrest/templates/1.0"
    format="html" name="siteinfo-last-published-howto" inputFormat="xsl" body="true" head="false"&gt;
    &lt;xsl:stylesheet version="1.1" 
        xmlns:i18n="http://apache.org/cocoon/i18n/2.1"
        xmlns:xsl="http://www.w3.org/1999/XSL/Transform"&gt;
        &lt;xsl:template name="siteinfo-last-published-howto-body"&gt;
          debug string - 
          &lt;script type="text/javascript"&gt;document.write("&lt;i18n:text &gt;Last Published:&lt;/i18n:text&gt;&amp;#160;" + document.lastModified);&lt;/script&gt;
        &lt;/xsl:template&gt;
    &lt;/xsl:stylesheet&gt;
  &lt;/forrest:template&gt;
&lt;/forrest:contract&gt;
      </source>
    </section>
    <section id="structurerContract">
      <title>Activating the contract</title>
      <p>
        To see whether the new contract works we need to add it to our structurer.
        The contract usage contains the contract-tag <code>&lt;forrest:contract name="siteinfo-last-published-howto"/&gt;</code>
        Please see <a href="site:v0.80//howto/dispatcher/structurer">Getting started with the "structurer"</a> for more details.
      </p>
       <note>
        Next to write are parameter-contracts with advanced features of the dispatcher. 
      </note>
    </section>
  </section><section id="Further Reading"><title>Further Reading</title>
    <p>
      Congratulations you are now able to work with structurer contracts. 
      From here we recommend to read the following How-To's (if not already done):
    </p>
    <ul>
      <li><a href="site:v0.80//howto/dispatcher/structurer">Getting started with the "structurer"</a> </li>
    </ul>
  </section><section id="Feedback"><title>Feedback</title>
    <p>
      Please provide feedback about this document via the
      <a href="site:mail-lists">mailing lists</a>.
    </p>
  </section></body></document>