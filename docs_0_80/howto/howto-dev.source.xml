<?xml version="1.0" encoding="ISO-8859-1"?><!--
  Copyright 2005 The Apache Software Foundation or its licensors,
  as applicable.

  Licensed under the Apache License, Version 2.0 (the "License");
  you may not use this file except in compliance with the License.
  You may obtain a copy of the License at

      http://www.apache.org/licenses/LICENSE-2.0

  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.
--><document><header>
    <title>How be a Forrest developer</title>

    <abstract>
      This How-To provides some tips and procedures for being a
      Forrest developer.
    </abstract>

    <last-modified-content-date date="2005-08-22"/>
  </header><body><section id="Intended Audience"><title>Intended Audience</title>
<warning>
This document is under initial development.
</warning>
    <p>
      People who are ready to go beyond the basics of using Forrest.
      This might be to utilise Forrest for your advanced needs, debugging,
      creating a new plugin, enhancing an existing plugin, enhancing the core
      capabilities, contributing such enhancements back to the Apache Forrest
      project, etc. In all cases, this is what we mean by "developer".
    </p>
    <p>
      Actually, users will also find that some parts of this document are
      useful. For example, the section about debugging and the section about
      editing content.
    </p>
    <p>
      See also the companion document "How to be a committer".
    </p>
  </section><section id="Purpose"><title>Purpose</title>
    <p>
      This How-To provides some tips and procedures for being
      an Apache Forrest developer. Ideally a developer would
      also contribute back to the project, so these notes assume that.
      Various key development tasks are used as worked examples.
    </p>
  </section><section id="Prerequisites"><title>Prerequisites</title>
    <ul>
      <li>
        You have achieved the basic level of using Forrest. You have Forrest
        installed and can create a new site with 'forrest seed'.
        You have followed at least the first parts of the 
        <a href="site:v0.80//documentation/your-project">Using Forrest</a>
        document.
      </li>
      <li>
        You will enventually see that understanding of the Cocoon
        <a href="site:v0.80//documentation/developers/sitemap-ref">sitemap</a>
        is important. For the initial examples below, you can do without that.
        However please explore the sitemap soon.
      </li>
    </ul>
  </section><section id="Development techniques and scenarios"><title>Development techniques and scenarios</title>
    <p>
      Various scenarios are utilised to describe aspects of development.
      Bear in mind that there are many
      ways to do things. Each developer has different tools and habits,
      and different operating systems are used. So you will need to glean
      the principles and apply them to your own situation.
    </p>

    <p>
      This document assumes that you intend to contribute some parts of
      your work back to the project. Techniques for network-based collaborative
      development are encouraged.
    </p>

    <section id="svn">
      <title>Using Subversion</title>
      <p>
        The Subversion source control system is used for all ASF projects.
        You can leverage this to ease your own development.
      </p>

      <p>
        The "trunk" is where all new development and bugfixing happens.
        We aim to keep the trunk usable at all times.
      </p>

      <p>
        Each version release is a "branch", such as "forrest_07_branch".
        Crucial bugfixes are also applied to the relevant release branch.
      </p>

      <p>
        Branches are also used for developing
        complex new code which would otherwise disrupt the trunk. When the new
        work is suitable, then that branch is merged back to the trunk as soon
        as possible.
      </p>

      <p>
        To get started, see the
        <a href="site:v0.80//documentation/developers/build">instructions</a>
        for obtaining the Apache Forrest sources via SVN.
      </p>

      <section id="multiple">
        <title>Multiple working copies</title>
        <p>
          Most developers would have a number of separate SVN working copies.
          Hopefully you are brave enough to use the trunk for all your sites.
          Sometimes that is not possible, for example when you are
          co-operativley managing a site with other people who are not so
          brave, so you need to use a specific release. However consider using
          the SVN release branch, rather than the release archive (tar or zip).
          This enables you to easily keep up with bugfixes. You can also easily
          see what local changes that you have made by using 'svn status; svn diff'.
        </p>
        <p>
          Here is one layout ...
        </p>
        <source xml:space="preserve">
[localhost]$ ls /svn/asf
forrest_07_branch
forrest-trunk
        </source>
      </section>

      <section id="svn-email">
        <title>Watch email notifications for svn differences</title>
        <p>
          Either subscribe to the project's
          <a href="site:mail-lists/forrest-svn">svn mailing list</a>
          or monitor it via one of the mail archives. This enables you
          to be immediately up-to-date with changes to the repositories.
          The svn differences (diffs) are automatically sent whenever
          a committer makes some changes.
        </p>
      </section>

      <section id="tips-svn">
        <title>Tips</title>
        <ul>
          <li>
            Keep a copy of this book, or the online version, close at hand:
            <a href="http://svnbook.red-bean.com/">Version Control with Subversion</a>
            - the opensource SVN book.
          </li>
          <li>
            See all available branches and other repositories:
            <a href="http://svn.apache.org/repos/asf/forrest/">http://svn.apache.org/repos/asf/forrest/</a>
          </li>
          <li>
            Use online repository browsers to quickly see past activity for
            the files that you are working on:
            <a href="http://svn.apache.org/viewcvs.cgi/forrest/trunk/">http://svn.apache.org/viewcvs.cgi/forrest/trunk/</a>
          </li>
          <li>
            Use 'svn log foo.xsl' for a summary of recent activity and to
            see dates and revision numbers for changes.
          </li>
        </ul>
      </section>
    </section>

    <section id="edit">
      <title>Editing content</title>
      <p>
        See the 
        <a href="site:v0.80//documentation/faq/edit-content">FAQ</a>.
        Basically any editor can
        be used, because Forrest treats the editing of content as a separate
        concern. Be sure to configure the editor to find local copies of DTDs.
      </p>

      <section id="code-style">
        <title>Code style guidelines</title>
        <p>
          Consistent code makes everyone's life easier.
          See the 
          <a href="http://cocoon.apache.org/community/committer.html">Apache Cocoon tips</a>.
          We don't get too hung up on style, but a few basic things are important.
        </p>
      </section>

      <section id="whitespace">
        <title>Whitespace</title>
        <p>
          For new file, use spaces instead of tabs (java files have four-space indentation,
          xml files and other text files have two-space indentation).
        </p>
        <p>
          Don't let your editor automatically change the whitespace for existing
          files.
        </p>
        <p>
          We know that many files in SVN do not have consistent whitespace.
          This issue is continually being addressed. Please don't attempt
          to rectify whitespace mixed up with other changes. This makes the
          important changes difficult to see. Occasionally committers will
          rectify whitespace for a set of files, when they know that no-one
          else is working on that set.
        </p>
        <fixme author="open">
          The issues of whitespace and line endings needs to be very clearly described.
          See some
          <a href="http://marc.theaimsgroup.com/?l=forrest-dev&amp;m=112450886218545">mail discussion</a>
          references.
        </fixme>
      </section>

      <section id="line-length">
        <title>Line length</title>
        <p>
          If each paragraph of an xml source document is one enourmous long
          line, then it is extremely difficult to know the changes with the
          SVN diffs. Developers and especially committers, need to be able to
          efficiently review the changes. Fold long lines to a sensible
          line-length (normally 80-characters wide but not more than 120 characters).
        </p>
      </section>

      <section id="review">
        <title>Use 'forrest run' for immediate gratification</title>
        <p>
          Edit content and immediately view it in the browser.
          When you are satisifed, then do 'forrest site' to ensure that the
          whole documentation set hangs together and there are no broken
          references.
        </p>
        <p>
          In the dynamic 'forrest run' mode, you will get some feedback
          about some xml validation errors. However, it is better to treat
          validation as a separate concern. Use an xml editor or command-line
          tools such as "xmllint". As a last resort, you can use
          'forrest validate-xdocs'.
        </p>
      </section>

      <section id="tips-edit">
        <title>Tips</title>

        <ul>
          <li>
####
          </li>
        </ul>
      </section>
    </section>

    <section id="debug">
      <title>Debugging and profiling techniques</title>
      <p>
        This <a href="site:v0.80//documentation/faq/logs">FAQ</a>
        describes the location of the Cocoon logfiles and their
        configuration.
      </p>

      <section id="debug-cocoon-profiler">
        <title>Using Cocoon sitemap profiler</title>
        <p>
          Cocoon provides a simple profiler to analyse itself.
          This enables us to list the various sitemap pipelines and
          components that are being used, how much time was used
          by each, whether each component uses the Cocoon cache,
          and show the actual xml data.
        </p>
        <p>
          Note that the profiler is not used by default. To switch
         it on, edit <code>main/webapp/sitemap.xmap</code> and search
         for "profiler". Follow the instructions there to replace the
          standard "map:pipe" components with the profiling pipes.
        </p>
        <p>
          Now start your application as normal using 'forrest run'
          and request localhost:8888/index.html three or four times
          to populate the profiler with data.
        </p>
        <p>
          Now request the special uri localhost:8888/cprofile.html
          to see the results. Start at the "index.html" request,
          then follow the processing. (If the table is empty, then
          you either forgot to do some requests before looking for results,
          or forgot to switch on the profiler in sitemap.)
        </p>
        <p>
          NOTE: Do not forget to turn off the profiler in 
          <code>main/webapp/sitemap.xmap</code> when finished.
        </p>
      </section>

      <section id="debug-sitemap-exec">
        <title>Using Cocoon sitemap execution logger</title>
        <p>
          In main/webapp/WEB-INF/xconf/forrest-core.xconf
          search for "sitemap execution" and uncomment the component.
          For each sitemap component that is executed, a message will go to
          WEB-INF/logs/debug.log
        </p>
      </section>

      <section id="debug-logtransformer">
        <title>Using Cocoon LogTransformer</title>
        <p>
          LogTransformers can be inserted in the sitemaps. This will write
          the sax events at that point into a named log file.
          Here is an example (the logfile will be written relative to this
          particular sitemap) ...
        </p>
      <source xml:space="preserve">
&lt;map:match pattern="*.html"&gt;
  &lt;map:generate src="sources/{1}.xml"/&gt;<strong>
  &lt;map:transform type="log"&gt;
    &lt;map:parameter name="logfile" value="my-1.log"/&gt;
    &lt;map:parameter name="append" value="no"/&gt;
  &lt;/map:transform&gt;</strong>
  &lt;map:transform src="stylesheets/source-to-table.xsl"/&gt;
  &lt;map:transform src="stylesheets/table-to-page.xsl"/&gt;<strong>
  &lt;map:transform type="log"&gt;
    &lt;map:parameter name="logfile" value="my-2.log"/&gt;
    &lt;map:parameter name="append" value="no"/&gt;
  &lt;/map:transform&gt;</strong>
  &lt;map:transform src="stylesheets/page-to-html.xsl"/&gt;
  &lt;map:serialize type="html"/&gt;
&lt;/map:match&gt;
</source>
        <p>
          Another use for this technique is when you are not sure which
          path is being taken through the sitemap. Add various LogTransformers
          with different filenames and see which one gets triggered.
        </p>
      </section>

      <section id="debug-links">
        <title>Finding broken internal links</title>
        <p>
          Do 'forrest site' to produce the whole documentation set.
          Cocoon will report its progress and reveal any problems.
          This <a href="site:v0.80//documentation/faq/build_msg_a">FAQ</a>
          explains the messages that Cocoon sends to standard output.
          Broken links are also reported to a special file, which also shows
          the source file containing the break. The location
          of this file is reported when Cocoon starts.
        </p>
        <p>
          Broken links are also reported in 'forrest run' mode.
          Use your mouse to point to each link. The browser status bar
          will show "error:..." instead of the actual URL.
        </p>
        <p>
          The most common cause is that the entry is missing in the site.xml
          configuration file or the link in your source document is not
          using the correct name for the "site:..." value.
        </p>
      </section>

      <section id="tips-debug">
        <title>Tips</title>
        <ul>
          <li>
            Doing 'forrest -v' will provide verbose build messages to the
            standard output.
          </li>
        </ul>
      </section>
    </section>

    <section id="find">
      <title>Finding the relevant sources</title>
      <p>
        You will need to be able to find which sources, sitemaps, stylesheets
        are responsible for certain processing.
      </p>
      <section id="find-scenario-1">
        <title>Scenario: How does i18n work</title>
        <p>
          We will do a search for "i18n" to start with, then refine that after
          exploring some of the sources.
        </p>
        <p>
          The UNIX tools find, grep, and sed are very powerful. We need a
          helper script, otherwise 'find' is going to report matches for
          the hidden .svn files and also files in /build/ directories.
        </p>

        <source xml:space="preserve">
echo "sed '/\.svn/d;/\/build\//d;/\/work\//d'" &gt; ~/bin/exclude-find-svn
chmod +x ~/bin/exclude-find-svn</source>
        <p>
          Now we will run find, use grep to search for the pattern in each
          file and list the filenames. However, there is a stack of
          forrest.properties files from the plugins, and there is i18n:text
          being used in the viewHelper plugin, and some DTDs.
          So weed them out ...
        </p>

        <source xml:space="preserve">
cd /svn/asf/forrest-trunk
find . -type f | xargs grep -l "i18n" | ~/bin/exclude-find-svn \
 | grep -v "forrest.properties" | grep -v viewHelper | grep -v "\/schema\/"</source>

        <p>
          The list of files shows that there is an FAQ about i18n, there are
          various sitemaps in main/webapp/, some stylesheets in
          main/webapp/skins/common/ and pelt, some other stylesheets in
          main/webapp/resources/stylesheets/ ... we will look at the sitemaps
          first. Use grep to list the actual matches and the filenames.
        </p>
        <source xml:space="preserve">
cd main/webapp
grep i18n *.*</source>
        <p>
          Shows that five sitemaps are involved in some way. Always start with
          sitemap.xamp and forrest.xmap as they do initial processing and
          then delegate to other sitemaps. Open each file in your editor,
          and search within for each "i18n" match. See that the xslt transformer 
          is declared to use i18n, then further down the page the "skinit"
          pipeline uses the i18n transformer only if i18n is switched on.
        </p>
      </section>

      <section id="tips-find">
        <title>Tips</title>
        <ul>
          <li>
####
          </li>
        </ul>
      </section>
    </section>

<!-- template
    <section id="foo">
      <title>Foo</title>
      <p>
####
      </p>
      <section id="foo-1">
        <title>foo</title>
        <p>
####
        </p>
      </section>

      <section id="tips-foo">
        <title>Tips</title>
        <ul>
          <li>
####
          </li>
        </ul>
      </section>
    </section>
-->

  </section><section id="Frequently Asked Questions"><title>Frequently Asked Questions</title><section><title>1 General issues</title><section><title>1.1 FAQ 1</title>
          <p>
####
          </p>
        </section></section><section><title>2 Other issues</title><section><title>2.1 FAQ 2.1</title>
          <p>
###
          </p>
        </section></section></section><section id="Tips"><title>Tips</title>
    <p>
      This is a collection of general tips that do not fit in the sections above. 
    </p>

    <section id="tip-howto">
      <title>Explanations about howto topics on the mailing lists</title>

      <p>
        Often there are useful discussions on the mailing lists which explain
        how to do certain tasks. If you don't have time to summarise that and
        add to this howto document, then please consider just adding a tip
        which links to the email discussion. Later someone else can summarise.
      </p>
    </section>
  </section><section id="References"><title>References</title>
    <p>
      These are some other documents that are useful for developers.
    </p>

    <ul>
      <li>
###
      </li>
    </ul>
  </section></body></document>