<?xml version="1.0" encoding="utf-8"?>
<!--
  Licensed to the Apache Software Foundation (ASF) under one or more
  contributor license agreements.  See the NOTICE file distributed with
  this work for additional information regarding copyright ownership.
  The ASF licenses this file to You under the Apache License, Version 2.0
  (the "License"); you may not use this file except in compliance with
  the License.  You may obtain a copy of the License at

      http://www.apache.org/licenses/LICENSE-2.0

  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.
-->
<!DOCTYPE glossary PUBLIC "-//Apache Forrest//DTD Glossary V1.0//EN"
"glossary-v10.dtd">
<glossary>
  <title>Dispatcher Glossary</title>
  <introduction>
    <p>This is a glossary of terms and their definitions for the Dispatcher
    (aka views).</p>
  </introduction>
  <part id="a">
    <title>A</title>
    <item id="AddContent">
      <term>Add content to this Glossary</term>
      <definitions>
        <definition>This glossary is incomplete, please help where you can by
        adding definitions to existing items where needed. Also, add new
        Dispatcher related Items to the glossary as appropriate.</definition>
      </definitions>
      <notes>
        <item-note>See 
        <link href="http://marc.theaimsgroup.com/?l=forrest-dev&amp;m=112596689428172&amp;w=2#1">
        Archive Mail</link></item-note>
        <item-note>See 
        <link href="http://issues.apache.org/jira/browse/FOR-639">Issue
        FOR-639</link></item-note>
      </notes>
    </item>
  </part>
  <part id="c">
    <title>C</title>
    <item id="Contracts">
      <term>Contracts</term>
      <definitions>
        <definition>A contract is a snippet of re-usable code that gets used in
        a structurer file.</definition>
        <definition>Contracts can be used or omitted as neccessary, though a
        few are really compulsary in order to define a basic skeleton structure
        and to include some styling (CSS)</definition>
        <definition>Contracts mainly come in three (3) types, static,
        semi-static &amp; dynamic. 
        <br />Static Contracts are pre-defined snippets of code that need no
        further information. 
        <br />Semi-static Contracts can include extra configuration variables,
        these would over-ride otherwise default variables. 
        <br />Dynamic Contracts can have extra configuration variables, but can
        also define their own snippets of code information. (Such as extra CSS
        elements, or generic markup elements).</definition>
      </definitions>
    </item>
    <item id="Class">
      <term>Class</term>
      <see>
        <id>Name</id>
        <text>Name</text>
      </see>
      <definitions>
        <definition>In the context of the dispatcher, a 
        <strong>Class</strong>is used as an optional attribute to the
        forrest:hook. This converts to 
        <code>
          <![CDATA[<div class="example"></div>]]>
</code>.</definition>
      </definitions>
    </item>
  </part>
  <part id="d">
    <title>D</title>
    <item id="Dispatcher">
      <term>Dispatcher</term>
      <see>
        <id>Contracts</id>
        <text>Contracts</text>
      </see>
      <see>
        <id>Skins</id>
        <text>Skins</text>
      </see>
      <see>
        <id>SoC</id>
        <text>Separation Of Concerns</text>
      </see>
      <see>
        <id>Themes</id>
        <text>Themes</text>
      </see>
      <see>
        <id>Views</id>
        <text>Views</text>
      </see>
      <definitions>
        <definition>The Dispatcher is the codename for the Forrest
        Implementation of the Core J2EE Dispatcher View. 
        <link href="http://java.sun.com/blueprints/corej2eepatterns/Patterns/DispatcherView.html">
        java.sun.com</link>has more information on its origins.</definition>
        <definition>What we at 'Forrest' relate the Dispatcher to, is the
        overall technology and implementation of the replacement 'skins'
        system. Combining 'Views', 'Contracts' , 'Themes' enables separation of
        concerns to provide a fast and efficient documentation
        framework.</definition>
      </definitions>
    </item>
  </part>
  <part id="h">
    <title>H</title>
    <item id="Hooks">
      <term>forrest:hooks</term>
      <see>
        <id>Contracts</id>
        <text>Contracts</text>
      </see>
      <see>
        <id>Structurer</id>
        <text>Structurer</text>
      </see>
      <definitions>
        <definition>forrest:hooks is a concept of defining format independent
        hooks to structure the output.</definition>
        <definition>Hooks are used to help define the layout of a page. Hooks
        are only used to define the structure in our output that is required to
        enable a theme to apply its look and feel.</definition>
        <definition>Hooks convert to layout 
<![CDATA[<div></div>]]>
container blocks and usually only consist of forrest:contracts</definition>
        <definition>Hooks are applied currently in the themes.core plugin as
        part of a themes structurer configuration file such as %themename
        %-html.panel.xml (e.g pelt-html.panel.xml) or included in such
        configuration files via a panel file such as
        %themename%-%format%.panel.xml (e.g pelt-html.panel.xml)</definition>
      </definitions>
    </item>
  </part>
  <part id="n">
    <title>N</title>
    <item id="Name">
      <term>Name</term>
      <see>
        <id>Class</id>
        <text>Class</text>
      </see>
      <definitions>
        <definition>In the context of the dispatcher, a 
        <strong>name</strong>is used as an optional attribute to the
        forrest:hook. This converts to 
        <code>
          <![CDATA[<div id="example"></div>]]>
</code>.</definition>
      </definitions>
    </item>
  </part>
  <part id="p">
    <title>P</title>
    <item id="Property">
      <term>Property</term>
      <definitions>
        <definition>forrest:property - Todo:open</definition>
      </definitions>
    </item>
    <item id="Panels">
      <term>Panels</term>
      <see>
        <id>Contracts</id>
        <text>Contracts</text>
      </see>
      <see>
        <id>Structurer</id>
        <text>Structurer</text>
      </see>
      <see>
        <id>Tiles</id>
        <text>Tiles</text>
      </see>
      <definitions>
        <definition>A Panel is a defined area of the page consisting of one
	or more contracts. There are a minimum amount of Panels neccessary
	in order to create a page layout - such as header, left nav, main
        content area, footer. Panels are pulled together to create an overall
        page layout inside $theme.structurer.xml configuration file.
        The Panel is a replacement for the older 'tile' implementation.
	      </definition>
      </definitions>
    </item>
  </part>
  <part id="s">
    <title>S</title>
    <item id="Structurer">
      <term>Structurer</term>
      <see>
        <id>Contracts</id>
        <text>Contracts</text>
      </see>
      <see>
        <id>Hooks</id>
        <text>Hooks</text>
      </see>
      <see>
        <id>Property</id>
        <text>Property</text>
      </see>
      <see>
        <id>Themes</id>
        <text>Themes</text>
      </see>
      <definitions>
        <definition>The Structurer allows a user to define the layout and
        content of a site or parts of a site.</definition>
        <definition>Structurer files contain hooks &amp; contracts which you
        can include to build up a site structure template</definition>
        <definition>A completed structurer file defines an overall theme (look
        and feel) for a site</definition>
      </definitions>
    </item>
    <item id="Skins">
      <term>Skins</term>
      <see>
        <id>Themes</id>
        <text>Themes</text>
      </see>
      <see>
        <id>Dispatcher</id>
        <text>Dispatcher</text>
      </see>
      <definitions>
        <definition>Skins is the name of the older alternative way for
        structuring and styling your site pages.</definition>
        <definition>Skins is still used in Forrest versions 0.7 and 0.8-dev,
        though for 0.8-dev and beyond it can be concidered an option with
        Dispatcher being the other.(It is enabled as the default option
        currently)</definition>
      </definitions>
    </item>
  </part>
  <part id="t">
    <title>T</title>
    <item id="Tiles">
      <term>Tiles</term>
      <see>
        <id>Panels</id>
        <text>Panels</text>
      </see>
      <definitions>
        <definition>A tile is a collection of contracts that are grouped
        together for easy inclusion into a theme.</definition>
        <definition>Tiles was the original but deprecated name for a collection
        of contracts, it is now re-named and re-implemented as a
        'Panels'</definition>
      </definitions>
    </item>
    <item id="Themes">
      <term>Themes</term>
      <definitions>
        <definition>A more extensible and adaptable solution than its
        alternative 'Skins'. A 'Theme' is an overall content &amp; style
        set.</definition>
        <definition>A master 'common' theme provides the basis in which you can
        extend, over-ride or add to in order to make your own theme, you do not
        have to create a complete theme from scratch, simply
        include/exclude/over-ride/add what you need. The current 'Pelt Theme'
        based on its 'Pelt Skin' counterpart, but uses functionality and
        extends/inherits what it needs to from the 'common' theme.</definition>
      </definitions>
    </item>
  </part>
  <part id="v">
    <title>V</title>
    <item id="Views">
      <term>Views</term>
      <see>
        <id>Dispatcher</id>
        <text>Dispatcher</text>
      </see>
      <definitions>
        <definition>Views is the older now deprecated name for what is now the
        'Dispatcher'</definition>
        <definition>Views also, confusingly, was used as a term for the
        Structurer, and forrest:structurer is a deprecated code that has been
        replaced with forrest:template.</definition>
      </definitions>
    </item>
  </part>
</glossary>
