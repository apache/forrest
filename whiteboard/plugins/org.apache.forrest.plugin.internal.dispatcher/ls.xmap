<?xml version="1.0"?>
<!--
  Licensed to the Apache Software Foundation (ASF) under one or more
  contributor license agreements.  See the NOTICE file distributed with
  this work for additional information regarding copyright ownership.
  The ASF licenses this file to You under the Apache License, Version 2.0
  (the "License"); you may not use this file except in compliance with
  the License.  You may obtain a copy of the License at

  http://www.apache.org/licenses/LICENSE-2.0
  
  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.
-->
<!-- forrest:structurer
  ***********************
  The structuring of the assembled page where all content is in place
  and structured with forrest:hooks to provide hooks for theming.
  
  It is the job of a forrest:structurer to define this structure. The
  structurer uses for this a couple of helper classes forrest:contracts,
  forrest:hooks and forrest:properties. But there is more to a
  forrest:structurer than just structure. 
  
  The structurer is not limited to a document but can request and
  structure the content from multiple input sources. Far more actually
  because it provides as well logical conditions for presentation formatting logic
-->
<map:sitemap xmlns:map="http://apache.org/cocoon/sitemap/1.0">
  <map:components>
    <map:pipes default="caching" />
    <map:generators default="file" />
    <map:transformers default="xslt" />
    <map:serializers default="xml" />
  </map:components>
  <map:pipelines>
    <!-- ls.contracts 
      list the default contracts-->
    <map:pipeline>
      <map:match pattern="ls.contracts.source.xml">
        <map:generate src="{lm:dispatcher.themer}/themes"
        type="xpathdirectory">
          <map:parameter name="xpath" value="/*" />
          <map:parameter name="xmlFiles" value="\.ft$" />
          <map:parameter name="exclude" value="[\w]*.svn" />
          <map:parameter name="depth" value="3" />
        </map:generate>
        <map:transform src="{lm:ls.contracts.xsl}" />
        <map:serialize />
      </map:match>
      <map:match pattern="ls.contracts.**.plugin.**.source.xml">
        <map:generate src="{forrest:forrest.plugins}/{1}.plugin.{2}/resources/themes"
        type="xpathdirectory">
          <map:parameter name="xpath" value="/*" />
          <map:parameter name="xmlFiles" value="\.ft$" />
          <map:parameter name="exclude" value="[\w]*.svn" />
          <map:parameter name="depth" value="3" />
        </map:generate>
        <map:transform src="{lm:ls.contracts.xsl}" />
        <map:serialize type="xml-document" />
      </map:match>
      <map:match pattern="ls.contracts.project.source.xml">
        <map:generate src="{lm:themer.project.dir}" type="xpathdirectory">
          <map:parameter name="xpath" value="/*" />
          <map:parameter name="xmlFiles" value="\.ft$" />
          <map:parameter name="exclude" value="[\w]*.svn" />
          <map:parameter name="depth" value="3" />
        </map:generate>
        <map:transform src="{lm:ls.contracts.xsl}" />
        <map:serialize />
      </map:match>
      <map:match pattern="ls.contracts.xml">
        <map:generate src="cocoon:/ls.contracts.source.xml" />
        <map:transform src="{lm:ls.contracts-to-document.xsl}" />
        <map:serialize />
      </map:match>
      <map:match pattern="ls.contracts.**.plugin.**.xml">
        <map:generate src="cocoon:/ls.contracts.{1}.plugin.{2}.source.xml" />
        <map:transform src="{lm:ls.contracts-to-document.xsl}" />
        <map:serialize />
      </map:match>
      <map:match pattern="ls.contracts.project.xml">
        <map:generate src="cocoon:/ls.contracts.project.source.xml" />
        <map:transform src="{lm:ls.contracts-to-document.xsl}" />
        <map:serialize />
      </map:match>
      <map:match pattern="ls.contract-*.xml">
        <map:generate src="cocoon:/ls.contracts.source.xml" />
        <map:transform src="{lm:ls.contracts-to-document.xsl}">
          <map:parameter name="requestedContract" value="{1}" />
        </map:transform>
        <map:serialize />
      </map:match>
      <map:match pattern="ls.contract.project-*.xml">
        <map:generate src="cocoon:/ls.contracts.project.source.xml" />
        <map:transform src="{lm:ls.contracts-to-document.xsl}">
          <map:parameter name="requestedContract" value="{1}" />
        </map:transform>
        <map:serialize />
      </map:match>
      <map:match pattern="less.contract-*.xml">
        <map:generate src="cocoon:/ls.contracts.source.xml" />
        <map:transform src="{lm:ls.contracts-to-document.xsl}">
          <map:parameter name="requestedContract" value="{1}" />
          <map:parameter name="less" value="true" />
        </map:transform>
        <map:serialize />
      </map:match>
      <map:match pattern="less.contract.project-*.xml">
        <map:generate src="cocoon:/ls.contracts.project.source.xml" />
        <map:transform src="{lm:ls.contracts-to-document.xsl}">
          <map:parameter name="requestedContract" value="{1}" />
          <map:parameter name="less" value="true" />
        </map:transform>
        <map:serialize />
      </map:match>
    </map:pipeline>
  </map:pipelines>
</map:sitemap>
