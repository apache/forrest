<?xml version="1.0"?>
<!--
Licensed to the Apache Software Foundation (ASF) under one or more
contributor license agreements.  See the NOTICE file distributed with
this work for additional information regarding copyright ownership.
The ASF licenses this file to You under the Apache License, Version 2.0
(the "License"); you may not use this file except in compliance with
the License.  You may obtain a copy of the License at

http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
-->
<forrest:contract
  xmlns:i18n="http://apache.org/cocoon/i18n/2.1"
  xmlns:forrest="http://apache.org/forrest/templates/1.0"
  name="content-main">
  <description>
    content-main will output the main content of the document.
  </description>
  <usage>
<![CDATA[<forrest:contract name="content-main" dataURI="cocoon://#{$getRequest}.source.rewritten.xml">
       <forrest:property name="config">
        <!-- Settings specific to PDF output. -->
        <!-- 
        Supported page sizes are a0, a1, a2, a3, a4, a5, executive,
        folio, legal, ledger, letter, quarto, tabloid (default letter).
        Supported page orientations are portrait, landscape (default
        portrait).
        Supported text alignments are left, right, justify (default left).
        -->
        <page text-align="left" background-color="#ffffff"/>
        
        <!-- Heading types can be clean|underlined|boxed  -->
        <headings type="boxed" color="#4a6d8c"/>

        <!--
        Print the URL text next to all links going outside the file
        -->
        <show-external-urls>false</show-external-urls>

        <colors>
          <color name="code" value="#CFDCED"/>
          <color name="highlight" value="#ffff00"/>
          <color name="fixme" value="#cc6600"/>
          <color name="note" value="#006699"/>
          <color name="warning" value="#990000"/>
          <color name="table" value="#7099C5"/>
          <color name="table-cell" value="#f0f0ff"/>
          <color name="body" value="#ffffff" link="#0F3660"
            vlink="#009999" hlink="#000066"/>
        </colors>
      </forrest:property>
    </forrest:contract>]]>
  </usage>
  <forrest:template
    xmlns:forrest="http://apache.org/forrest/templates/1.0"
    name="content-main" inputFormat="xsl">
    <xsl:stylesheet
      xmlns:xsl="http://www.w3.org/1999/XSL/Transform"
      xmlns:fo="http://www.w3.org/1999/XSL/Format"
      version="1.0">
      <xsl:param name="config"/>
<!-- left, justify, right -->
      <xsl:variable name="text-align"
        select="string($config/page/@text-align)"/>
<!-- print URL of external links -->
      <xsl:variable name="show-external-urls"
        select="$config/show-external-urls"/>
      <xsl:param name="numbersections" select="'true'"/>
<!-- page breaks after TOC and each page if an aggregate document -->
      <xsl:variable name="page-break-top-sections"
        select="'true'"/>
<!-- Section depth at which we stop numbering and just indent -->
      <xsl:param name="numbering-max-depth" select="'3'"/>
      <xsl:param name="imagesdir" select="."/>
      <xsl:param name="xmlbasedir"/>
      <xsl:template match="/">
        <forrest:content>
          <forrest:part xpath="/fo/xsl-region-body/body">
            <fo:block text-align="{$text-align}" padding-before="18pt" padding-after="18pt">
              <xsl:apply-templates select="/document/body"/>
            </fo:block>
          </forrest:part>
        </forrest:content>
      </xsl:template>
      <xsl:template match="anchor">
          <xsl:copy-of select="@id"/>
        <xsl:apply-templates/>
      </xsl:template>
      <xsl:template match="section">
        <xsl:param name="level">0</xsl:param>
        <xsl:variable name="size">
<!-- 14pt for level 1 12pt for level 2 -->
          <xsl:value-of select="14-number($level)"/>
        </xsl:variable>
        <xsl:variable name="background-color"
          select="$config/page/@background-color"/>
        <xsl:variable name="heading-color"
          select="$config/headings/@color"/>
        <xsl:variable name="heading-type"
          select="$config/headings/@type"/>
        <fo:block font-family="serif" font-size="{$size}pt"
          font-weight="bold" space-before="12pt"
          space-after="4pt" id="#{@id}">
          <xsl:call-template name="insertPageBreaks"/>
          <xsl:if test="$heading-type = 'boxed'">
            <xsl:attribute name="background-color">
              <xsl:value-of select="$heading-color"/>
            </xsl:attribute>
          </xsl:if>
          <xsl:if
            test="$numbersections = 'true' and number($level) &lt; $numbering-max-depth+1">
            <xsl:number format="1.1.1.1.1.1.1" count="section"
              level="multiple"/>
<xsl:text>. </xsl:text>
          </xsl:if>
<!-- For sections 4  or more nestings deep, indent instead of number -->
          <xsl:if
            test="number($level) &gt; $numbering-max-depth+1">
            <xsl:attribute name="start-indent">
              <xsl:value-of select="4+number($level)"/>
<xsl:text>pt</xsl:text>
            </xsl:attribute>
          </xsl:if>
          <xsl:value-of select="title"/>
        </fo:block>
        <xsl:if test="$heading-type = 'underlined'">
<!-- The non-breaking space in this block is required, otherwise
          the block won't be rendered at all. -->
          <fo:block font-family="serif"
            font-size="{10 div (number($level) +1 )}pt"
            background-color="{$heading-color}">&#160;
          </fo:block>
        </xsl:if>
        <fo:block background-color="{$background-color}">
          <xsl:apply-templates>
            <xsl:with-param name="level"
              select="number($level)+1"/>
          </xsl:apply-templates>
        </fo:block>
      </xsl:template>
<!-- Already taken into account with sections -->
      <xsl:template match="title"/>
      <xsl:template match="p">
          <xsl:copy-of select="@id"/>
        <xsl:choose>
          <xsl:when
            test="ancestor::li and not(preceding-sibling::*)">
            <fo:block space-after="4pt" font-family="serif">
              <xsl:call-template name="insertPageBreaks"/>
              <xsl:apply-templates/>
            </fo:block>
          </xsl:when>
          <xsl:otherwise>
            <fo:block space-before="4pt" space-after="4pt"
              font-family="serif">
              <xsl:call-template name="insertPageBreaks"/>
              <xsl:apply-templates/>
            </fo:block>
          </xsl:otherwise>
        </xsl:choose>
      </xsl:template>
      <xsl:template match="source">
          <xsl:copy-of select="@id"/>
        <xsl:variable name="color"
          select="$config/colors/color[@name='code']/@value"/>
        <fo:block font-family="monospace" font-size="10pt"
          background-color="{$color}"
          white-space-collapse="false"
          linefeed-treatment="preserve"
          white-space-treatment="preserve" wrap-option="wrap"
          text-align="start">
          <xsl:call-template name="insertPageBreaks"/>
          <xsl:apply-templates/>
        </fo:block>
      </xsl:template>
      <xsl:template match="ol|ul">
        <fo:list-block
          provisional-distance-between-starts="18pt"
          provisional-label-separation="3pt"
          text-align="start">
            <xsl:copy-of select="@id"/>
          <xsl:apply-templates/>
        </fo:list-block>
      </xsl:template>
      <xsl:template match="ol/li">
        <fo:list-item>
            <xsl:copy-of select="@id"/>
          <xsl:if test="not(following-sibling::li[1])">
            <xsl:attribute name="space-after">
              6pt</xsl:attribute>
          </xsl:if>
          <fo:list-item-label end-indent="label-end()">
            <fo:block>
              <xsl:number format="1."/>
            </fo:block>
          </fo:list-item-label>
          <fo:list-item-body start-indent="body-start()">
            <fo:block font-family="serif">
              <xsl:apply-templates/>
            </fo:block>
          </fo:list-item-body>
        </fo:list-item>
      </xsl:template>
<!-- Emulate browser handling of these invalid combinations that our DTD
      unfortunately allows -->
      <xsl:template match="ul/ul | ul/ol | ol/ul | ol/ol">
        <fo:list-item>
            <xsl:copy-of select="@id"/>
          <fo:list-item-label end-indent="label-end()">
            <fo:block></fo:block>
          </fo:list-item-label>
          <fo:list-item-body start-indent="body-start()">
            <fo:block font-family="serif">
              <xsl:apply-templates/>
            </fo:block>
          </fo:list-item-body>
        </fo:list-item>
      </xsl:template>
      <xsl:template match="ul/li">
        <fo:list-item>
            <xsl:copy-of select="@id"/>
          <xsl:if test="not(following-sibling::li[1])">
            <xsl:attribute name="space-after">
              6pt</xsl:attribute>
          </xsl:if>
          <fo:list-item-label end-indent="label-end()">
            <fo:block>&#x2022;
            </fo:block>
          </fo:list-item-label>
          <fo:list-item-body start-indent="body-start()">
            <fo:block font-family="serif">
              <xsl:apply-templates/>
            </fo:block>
          </fo:list-item-body>
        </fo:list-item>
      </xsl:template>
      <xsl:template match="dl">
        <fo:list-block
          provisional-distance-between-starts="18pt"
          provisional-label-separation="3pt"
          text-align="start">
            <xsl:copy-of select="@id"/>
          <xsl:apply-templates/>
        </fo:list-block>
      </xsl:template>
      <xsl:template match="dt">
        <fo:list-item>
            <xsl:copy-of select="@id"/>
          <fo:list-item-label end-indent="label-end()">
            <fo:block></fo:block>
          </fo:list-item-label>
          <fo:list-item-body start-indent="body-start()">
            <fo:block font-weight="bold">
              <xsl:apply-templates/>
            </fo:block>
          </fo:list-item-body>
        </fo:list-item>
      </xsl:template>
      <xsl:template match="dd">
        <fo:list-item>
            <xsl:copy-of select="@id"/>
          <fo:list-item-label end-indent="label-end()">
            <fo:block></fo:block>
          </fo:list-item-label>
          <fo:list-item-body start-indent="body-start()">
            <fo:block>
              <xsl:apply-templates/>
            </fo:block>
          </fo:list-item-body>
        </fo:list-item>
      </xsl:template>
      <xsl:template match="strong">
          <xsl:copy-of select="@id"/>
        <fo:inline font-weight="bold">
          <xsl:apply-templates/>
        </fo:inline>
      </xsl:template>
      <xsl:template match="em">
          <xsl:copy-of select="@id"/>
        <fo:inline font-style="italic">
          <xsl:apply-templates/>
        </fo:inline>
      </xsl:template>
      <xsl:template match="code">
          <xsl:copy-of select="@id"/>
        <fo:inline font-family="monospace">
          <xsl:apply-templates/>
        </fo:inline>
      </xsl:template>
      <xsl:template match="warning">
          <xsl:copy-of select="@id"/>
        <xsl:variable name="color"
          select="$config/colors/color[@name='warning']/@value"/>
        <fo:block margin-left="0.25in" margin-right="0.25in"
          font-weight="bold" font-size="10pt"
          font-family="serif" space-before="10pt"
          border-before-style="solid"
          border-start-style="solid" border-end-style="solid"
          border-color="{$color}" background-color="{$color}"
          color="#ffffff">
          <xsl:call-template name="insertPageBreaks"/>
          <xsl:choose>
            <xsl:when test="@label">
              <xsl:value-of select="@label"/>
            </xsl:when>
            <xsl:otherwise>Warning: </xsl:otherwise>
          </xsl:choose>
          <xsl:value-of select="title"/>
        </fo:block>
        <fo:block margin-left="0.25in" margin-right="0.25in"
          font-family="serif" font-size="8pt"
          border-after-style="solid"
          border-start-style="solid" border-end-style="solid"
          border-color="{$color}" background-color="#fff0f0"
          padding-start="3pt" padding-end="3pt"
          padding-before="3pt" padding-after="3pt"
          space-after="10pt">
          <xsl:apply-templates/>
        </fo:block>
      </xsl:template>
      <xsl:template match="note">
        <xsl:variable name="color"
          select="$config/colors/color[@name='note']/@value"/>
        <fo:block margin-left="0.25in" margin-right="0.25in"
          font-weight="bold" font-size="10pt" color="#ffffff"
          font-family="serif" space-before="10pt"
          border-before-style="solid"
          border-start-style="solid" border-end-style="solid"
          border-color="{$color}"
          background-color="{$color}">
            <xsl:copy-of select="@id"/>
          <xsl:call-template name="insertPageBreaks"/>
          <xsl:choose>
            <xsl:when test="@label">
              <xsl:value-of select="@label"/>
            </xsl:when>
<!-- insert i18n stuff here -->
            <xsl:otherwise>Note: </xsl:otherwise>
          </xsl:choose>
          <xsl:value-of select="title"/>
        </fo:block>
        <fo:block margin-left="0.25in" margin-right="0.25in"
          font-family="serif" font-size="8pt"
          space-after="10pt" border-after-style="solid"
          border-start-style="solid" border-end-style="solid"
          border-color="{$color}" background-color="#F0F0FF"
          padding-start="3pt" padding-end="3pt"
          padding-before="3pt" padding-after="3pt">
          <xsl:apply-templates/>
        </fo:block>
      </xsl:template>
      <xsl:template match="fixme">
        <xsl:variable name="color"
          select="$config/colors/color[@name='fixme']/@value"/>
        <fo:block margin-left="0.25in" margin-right="0.25in"
          font-weight="bold" font-size="10pt" color="#FFFFFF"
          font-family="serif" space-before="10pt"
          border-before-style="solid"
          border-start-style="solid" border-end-style="solid"
          border-color="{$color}"
          background-color="{$color}">
            <xsl:copy-of select="@id"/>
          <xsl:call-template name="insertPageBreaks"/>
<!-- insert i18n stuff here --> FIXME (
          <xsl:value-of select="@author"/>):
          <xsl:value-of select="title"/>
        </fo:block>
        <fo:block margin-left="0.25in" margin-right="0.25in"
          font-family="serif" font-size="8pt"
          space-after="10pt" border-after-style="solid"
          border-start-style="solid" border-end-style="solid"
          border-color="{$color}" background-color="#FFF0F0"
          padding-start="3pt" padding-end="3pt"
          padding-before="3pt" padding-after="3pt">
          <xsl:apply-templates/>
        </fo:block>
      </xsl:template>
      <xsl:template match="link|fork|jump">
        <xsl:variable name="color"
          select="$config/colors/color[@name = 'body']/@link"/>
        <xsl:choose>
          <xsl:when test="starts-with(@href, '#')">
            <fo:basic-link color="{$color}"
              text-decoration="underline"
              internal-destination="{substring(@href,2)}">
                <xsl:copy-of select="@id"/>
              <xsl:apply-templates/>
            </fo:basic-link>
          </xsl:when>
          <xsl:otherwise>
            <fo:basic-link color="{$color}"
              text-decoration="underline"
              external-destination="{@href}">
                <xsl:copy-of select="@id"/>
              <xsl:apply-templates/>
            </fo:basic-link>
            <xsl:if
              test="$show-external-urls = 'true' and @href != string(.)">
              (
              <xsl:value-of select="@href"/>) </xsl:if>
          </xsl:otherwise>
        </xsl:choose>
      </xsl:template>
      <xsl:template match="figure|img">
        <fo:block text-align="center">
          <xsl:call-template name="insertPageBreaks"/>
          <xsl:if test="normalize-space(@id)!=''">
            <xsl:attribute name="id">
              <xsl:value-of select="@id"/>
            </xsl:attribute>
          </xsl:if>
<!-- Make relative paths absolute -->
          <xsl:variable name="imgpath">
            <xsl:choose>
<!-- resources image dir -->
              <xsl:when
                test="starts-with(string(@src),'images/')">
                <xsl:value-of
                  select="concat($imagesdir,substring-after(@src,'images'))"/>
              </xsl:when>
<!-- already absolute -->
              <xsl:when
                test="contains(string(@src),':') or starts-with(string(@src),'/')">
                <xsl:value-of select="@src"/>
              </xsl:when>
<!-- relative to document -->
              <xsl:otherwise>
                <xsl:value-of
                  select="concat($xmlbasedir,@src)"/>
              </xsl:otherwise>
            </xsl:choose>
          </xsl:variable>
          <fo:external-graphic src="{$imgpath}">
            <xsl:if test="@height">
              <xsl:attribute name="height">
                <xsl:value-of select="@height"/>
              </xsl:attribute>
               <xsl:attribute
                    name="content-height">scale-to-fit</xsl:attribute>
            </xsl:if>
            <xsl:if test="@width">
              <xsl:attribute name="width">
                <xsl:value-of select="@width"/>
              </xsl:attribute>
                <xsl:attribute
                    name="content-width">scale-to-fit</xsl:attribute>
            </xsl:if>
              <!-- Work around for fop094 not supporting 
                  scale-down-to-fit, to be replaces as soon as fop095 is released
              -->
              <xsl:if
                  test=" not((@width|@height))">
                  <xsl:attribute
                      name="width">100%</xsl:attribute>
                  <xsl:attribute
                      name="content-width">scale-to-fit</xsl:attribute>
                  <xsl:attribute
                      name="content-height">100%</xsl:attribute>
              </xsl:if>
          </fo:external-graphic>
<!-- alt text -->
          <xsl:if test="$config/show-image-alt-text='true'">
            <xsl:if test="normalize-space(@alt)!=''">
              <fo:block>
                <xsl:value-of select="@alt"/>
              </fo:block>
            </xsl:if>
          </xsl:if>
        </fo:block>
      </xsl:template>
      <xsl:template match="table">
<!-- FIXME: Apache FOP must have column widths specified at present,
        this section can be removed when this limitation is removed from Fop.
        Unfortunately, this means that each column is a fixed width,
        but at least the table displays! -->
        <xsl:variable name="max-number-columns-td">
          <xsl:for-each select="tr">
            <xsl:sort select="count(td|th)" data-type="number"
              order="descending"/>
            <xsl:if test="position() = 1">
              <xsl:value-of select="count(td|th)"/>
            </xsl:if>
          </xsl:for-each>
        </xsl:variable>
        <xsl:variable name="max-number-columns-colspan">
          <xsl:for-each select="tr">
            <xsl:sort select="count(td|th)" data-type="number"
              order="descending"/>
            <xsl:if test="position() = 1">
              <xsl:value-of select="sum(td/@colspan|th/@colspan)"/>
            </xsl:if>
          </xsl:for-each>
        </xsl:variable>
        <xsl:variable name="max-number-columns">
          <xsl:choose>
            <xsl:when test="$max-number-columns-colspan&gt;$max-number-columns-td">
              <xsl:value-of select="$max-number-columns-colspan"/>
            </xsl:when>
            <xsl:otherwise>
              <xsl:value-of select="$max-number-columns-td"/>
            </xsl:otherwise>
          </xsl:choose>
        </xsl:variable>
        <xsl:variable name="column-width">
          <xsl:value-of
            select="6.25 div number($max-number-columns)"/>
          in </xsl:variable>
        <fo:table>
            <xsl:copy-of select="@id"/>
          <fo:table-column>
            <xsl:attribute name="column-width">
              <xsl:value-of select="$column-width"/>
            </xsl:attribute>
            <xsl:attribute name="number-columns-repeated">
              <xsl:value-of
                select="number($max-number-columns)"/>
            </xsl:attribute>
          </fo:table-column>
<!-- End of hack for Fop support (if removing this hack, remember
          you need the <fo:table> element) -->
          <fo:table-body font-size="10pt"
            font-family="sans-serif">
            <xsl:apply-templates select="tr"/>
          </fo:table-body>
        </fo:table>
<!-- FIXME: Apache Fop does not support the caption element yet.
        
        
        This hack will display the table caption accordingly. -->
        <xsl:if test="caption">
          <fo:block text-align="center" font-weight="bold">
<!-- insert i18n stuff here --> Table
            <xsl:text>
            </xsl:text>
            <xsl:number count="table" level="multiple"/>
<xsl:text>: </xsl:text>
            <xsl:value-of select="caption"/>
          </fo:block>
        </xsl:if>
      </xsl:template>
      <xsl:template match="tr">
        <fo:table-row>
            <xsl:copy-of select="@id"/>
          <xsl:apply-templates/>
        </fo:table-row>
      </xsl:template>
      <xsl:template match="th">
        <xsl:variable name="border-color"
          select="$config/colors/color[@name = 'table']/@value"/>
        <xsl:variable name="background-color"
          select="$border-color"/>
        <fo:table-cell padding-before="4pt"
          padding-after="4pt" padding-start="4pt"
          padding-end="4pt" color="#FFFFFF"
          background-color="{$background-color}"
          border="1pt solid {$border-color}">
            <xsl:copy-of select="@id"/>
            <xsl:if
                test="@colspan!=''">
                <xsl:attribute
                    name="number-columns-spanned">
                    <xsl:value-of
                        select="@colspan" />
                </xsl:attribute>
            </xsl:if>
            <xsl:if
                test="@rowspan!=''">
                <xsl:attribute
                    name="number-rows-spanned">
                    <xsl:value-of
                        select="@rowspan" />
                </xsl:attribute>
            </xsl:if>
          <fo:block text-align="center">
            <xsl:apply-templates/>
          </fo:block>
        </fo:table-cell>
      </xsl:template>
      <xsl:template match="td">
        <xsl:variable name="border-color"
          select="$config/colors/color[@name = 'table']/@value"/>
        <xsl:variable name="background-color"
          select="$config/colors/color[@name = 'table-cell']/@value"/>
        <fo:table-cell padding-before="4pt"
          padding-after="4pt" padding-start="4pt"
          padding-end="4pt"
          background-color="{$background-color}"
          border="1pt solid {$border-color}">
            <xsl:copy-of select="@id"/>
            <xsl:if
                test="@colspan!=''">
                <xsl:attribute
                    name="number-columns-spanned">
                    <xsl:value-of
                        select="@colspan" />
                </xsl:attribute>
            </xsl:if>
            <xsl:if
                test="@rowspan!=''">
                <xsl:attribute
                    name="number-rows-spanned">
                    <xsl:value-of
                        select="@rowspan" />
                </xsl:attribute>
            </xsl:if>
          <fo:block>
            <xsl:apply-templates/>
          </fo:block>
        </fo:table-cell>
      </xsl:template>
      <xsl:template match="br">
          <fo:block> <xsl:copy-of select="@id"/></fo:block>
      </xsl:template>
      <xsl:template match="legal">
        <fo:inline font-size="8pt">
          <xsl:apply-templates/>
        </fo:inline>
      </xsl:template>
<!-- ====================================================================== -->
<!-- Local Extensions section -->
<!-- ====================================================================== -->
      <xsl:template match="citation">
          <fo:inline><xsl:copy-of select="@id"/>[
          <xsl:value-of select="@def"/>] </fo:inline>
      </xsl:template>
      <xsl:template match="p[@class='quote']">
        <fo:block start-indent="1em" space-before="4pt"
          space-after="4pt" background-color="#f0f0f0"
          font-family="monospace">
          <xsl:call-template name="insertPageBreaks"/>
          <xsl:apply-templates/>
        </fo:block>
      </xsl:template>
      <xsl:template name="insertPageBreaks">
<!-- if marked as a 'pageBreakBefore', and we're breaking on pages, and were not the first node -->
        <xsl:if
          test="contains(@class, 'pageBreakBefore') and preceding-sibling::node()">
          <xsl:attribute name="break-before">
            page</xsl:attribute>
        </xsl:if>
<!-- if marked as a 'pageBreakAfter', and we're breaking on pages, and were not the last node -->
        <xsl:if
          test="contains(@class, 'pageBreakAfter') and following-sibling::node()">
          <xsl:attribute name="break-after">
            page</xsl:attribute>
        </xsl:if>
      </xsl:template>
<!-- ====================================================================== -->
<!-- Temporary section - subject to change on short notice  -->
<!-- ====================================================================== -->
      <xsl:template match="//style">
<!-- HACK: The OpenOffice.org input plugin currently produces
        intermediate documents that contain a style element, invalid per
        the Forrest Document DTD. This style element must be ignored
        here. To find out why this is done this way, read the comments
        attached to issue FOR-433. -->
      </xsl:template>
    </xsl:stylesheet>
  </forrest:template>
</forrest:contract>
