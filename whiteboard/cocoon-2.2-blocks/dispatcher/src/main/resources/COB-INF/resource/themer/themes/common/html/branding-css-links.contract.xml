<?xml version="1.0" encoding="UTF-8"?>
<!--
  Licensed to the Apache Software Foundation (ASF) under one or more
  contributor license agreements.  See the NOTICE file distributed with
  this work for additional information regarding copyright ownership.
  The ASF licenses this file to You under the Apache License, Version 2.0
  (the "License"); you may not use this file except in compliance with
  the License.  You may obtain a copy of the License at

      http://www.apache.org/licenses/LICENSE-2.0

  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.
-->
<forrest:contract 
  xmlns:i18n="http://apache.org/cocoon/i18n/2.1"
  xmlns:forrest="http://apache.org/forrest/templates/1.0"
  name="branding-css-links">
  <description>
    <p>
      branding-css-links will output html link elements for css usage.
    </p>

    <p>
      The contract includes css files which are passed in parameter with the
      following syntax :
    </p>
    <source>
<![CDATA[<css url="layout.]]><em>media</em>.css" [media="screen|print"] [theme="themeName"]<![CDATA[/>]]>
    </source>
    <ul>
      <li><strong>url</strong> attribute indicates the name of the css file, the dispatcher
     searches for this file in the following order :
        <ul>
          <li>Does the css file exists in the following directory - if yes, use this one :
            <source>$PROJECT_HOME/src/documentation/resources/themes/yourtheme/css/</source></li>
          <li>Otherwise, does the css file exists in the following directory - if yes, use this one :
            <source>$FORREST_HOME/whiteboard/plugins/org.apache.forrest.themes.core/resources/themes/yourtheme/css/</source></li>
          <li>Otherwise, does the css file exists in the following directory - if yes, use this one :
            <source>$FORREST_HOME/whiteboard/plugins/org.apache.forrest.themes.core/resources/themes/common/css/</source></li>
        </ul>
     The <strong>url</strong> attribute is required.
      </li>
      <li><strong>media</strong> attribute indicates to the browser the stylesheets to use
     depending on the detination media :
        <ul>
          <li><em>screen</em> : the stylesheet is used with the browser displaying the page on the screen,</li>
          <li><em>print</em> : the stylesheet is used while printing the document - or print preview...</li>
          <li>othervalues can also be managed by browsers.cf. <a href="http://www.w3.org/TR/REC-CSS2/media.html#media-types" class="fork">W3C Media Types</a>.</li>
        </ul>
        <div class="note">
          <div class="label">Firefox has a bug !</div>
          <div class="content">
            <p>
              There is a bug with firefox which does not manage media attribute
              while printing, the bug is already declared twice in bugzilla, so
              we are waiting...
            </p>
          </div>
        </div></li>
      <li><strong>theme</strong> attribute indicates to the browser for which theme this
        stylesheet should be used, letting you add several css files
        corresponding to different themes of the same page.<br/>
        If omitted, the <strong>theme</strong> attribute take the value of the <code>dispatcher.theme</code> property that you should have defined in your forrest.properties.xml file.
      </li>
    </ul>
  </description>
  <usage>
<![CDATA[<forrest:contract name="branding-css-links">
      <forrest:property name="branding-css-links-input">
        <css url="common.css"/>
        <css .../>
      </forrest:property>
    </forrest:contract>]]>
  </usage>
  <forrest:template xmlns:forrest="http://apache.org/forrest/templates/1.0"
    name="branding-css-links" inputFormat="xsl">
    <xsl:stylesheet version="1.1" 
      xmlns:xsl="http://www.w3.org/1999/XSL/Transform"
      xmlns:forrest="http://apache.org/forrest/templates/1.0">
      <xsl:param name="defaultVariables" select="'test.html'"/>
      <xsl:param name="branding-css-links-input"/>
      <xsl:variable name="root" select="$defaultVariables/*/*[@name='root']/@value"/>
      <xsl:variable name="theme" select="$defaultVariables/*/*[@name='theme']/@value"/>
      <xsl:template match="/">
        <forrest:content>
          <forrest:part xpath="/html/head">
            <xsl:apply-templates select="$branding-css-links-input"/>
          </forrest:part>
        </forrest:content>
      </xsl:template>
      <xsl:template 
        match="css[@url]">
        <xsl:copy-of select="@rel"/><link type="text/css">
        <xsl:choose>
          <xsl:when test="@rel">
            <xsl:attribute name="rel">
              <xsl:value-of select="@rel"/>
            </xsl:attribute>
          </xsl:when>
          <xsl:otherwise>
            <xsl:attribute name="rel">stylesheet</xsl:attribute>
          </xsl:otherwise>
        </xsl:choose>
        <xsl:choose>
          <xsl:when test="@theme">
            <xsl:attribute name="title">
              <xsl:value-of select="@theme"/>
            </xsl:attribute>
          </xsl:when>
          <xsl:otherwise>
            <xsl:attribute name="title">
              <xsl:value-of select="concat( translate( substring($theme, 1, 1), 'abcdefghijklmnopqrstuvwxyz', 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'), substring($theme,2))"/>
            </xsl:attribute>
          </xsl:otherwise>
        </xsl:choose>
        <xsl:variable name="prefix">
          <xsl:choose>
            <xsl:when test="@prefix">
              <xsl:value-of select="@prefix"/>
            </xsl:when>
            <xsl:otherwise>
                themes/
              </xsl:otherwise>
          </xsl:choose>
        </xsl:variable>
        <xsl:attribute name="href">
          <xsl:value-of 
            select="$root"/>
          <xsl:value-of 
            select="normalize-space($prefix)"/>
          <xsl:value-of 
            select="@url"/>
        </xsl:attribute>
        <xsl:if test="@media">
          <xsl:attribute name="media">
            <xsl:value-of select="@media"/>
          </xsl:attribute>
        </xsl:if></link>
      </xsl:template>
      <xsl:template match="css[not(@url)]">
        <style type="text/css">
          <xsl:value-of select="."/>
        </style>
      </xsl:template>
    </xsl:stylesheet>
  </forrest:template>
</forrest:contract>
