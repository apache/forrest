<?xml version="1.0" encoding="UTF-8"?>
<!--
  Licensed to the Apache Software Foundation (ASF) under one or more
  contributor license agreements.  See the NOTICE file distributed with
  this work for additional information regarding copyright ownership.
  The ASF licenses this file to You under the Apache License, Version 2.0
  (the "License"); you may not use this file except in compliance with
  the License.  You may obtain a copy of the License at

      http://www.apache.org/licenses/LICENSE-2.0

  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.
-->
<forrest:contract 
  xmlns:i18n="http://apache.org/cocoon/i18n/2.1"
  xmlns:forrest="http://apache.org/forrest/templates/1.0"
  name="master">
<!--NOTE: 
  THIS IS JUST AN EXPLANATION!!!-->
  <description>
    <p>
      This is just a master contract, it will output something but *nothing* in
      special. It should just serve to explain a wee bit contracts and what you
      can do with them.
    </p>
  </description>
  <usage>
<![CDATA[<forrest:contract name="master"/>]]>
  </usage>
  <forrest:template xmlns:forrest="http://apache.org/forrest/templates/1.0"
    name="master" inputFormat="xsl">
    <xsl:stylesheet version="1.1" 
      xmlns:xsl="http://www.w3.org/1999/XSL/Transform">
<!-- If you need default variables: -->
<!--<xsl:param name="defaultVariables" select="'test.html'"/>-->
<!-- then extract the variable like: -->
<!--<xsl:variable name="skin-img-dir" select="$defaultVariables/*/*[@name='skin-img-dir']/@value"/>-->
<!-- more information which variables are available can be found at http://localhost:8888/**.props
     which connects to the org.apache.forrest.plugin.output.inputModule plugin.
     A custom generator contacts the forrest properties input module to get all aviable key/values and
     outputs them to xml (dtd like forrest.properties.xml). -->
<!-- Since contracts are standalone every implementation has to be invoked by some input.-->
<!--  That means for xsl contracts that they are working for any xml input. 
          We need to match the root element to invoke the contract processing!!! 
          If no data model is requested by the structurer, the dispatcher will use a foo-doc in the transformation.
          That means that matching "/" always will work. -->
      <xsl:template match="/">
<!-- The dispatcher needs a well-formed xml document to work with. 
            The forrest:content element (as root element) can contain as many forrest:part's as you want. -->
        <forrest:content>
<!-- forrest:part within this element the actual content is going to. 
            If you use no @xpath then we insert content on the current structurer position.-->
          <forrest:part>
            Content going to the location defined by the structurer.
          </forrest:part>
<!--If you want to inject the content into a certain DOM position and
              *not* the current position in the structurer, you can use the @xpath attribute. -->
          <forrest:part xpath="/html/head">
            Content going to a fixed location defined by the contract (here: /html/head).
          </forrest:part>
        </forrest:content>
      </xsl:template>
<!-- copy n paste -->
<!--
      <xsl:param name="defaultVariables" select="'test.html'"/>
      <xsl:variable name="skin-img-dir" select="$defaultVariables/*/*[@name='skin-img-dir']/@value"/>
      <xsl:template match="/">
        <forrest:content>
          <forrest:part/>
          <forrest:part xpath="/html/head"/>
        </forrest:content>
      </xsl:template>
      -->
    </xsl:stylesheet>
  </forrest:template>
</forrest:contract>
