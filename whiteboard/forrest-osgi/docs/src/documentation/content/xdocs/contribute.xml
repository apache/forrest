<?xml version="1.0" encoding="UTF-8"?>
<!--
  Licensed to the Apache Software Foundation (ASF) under one or more
  contributor license agreements.  See the NOTICE file distributed with
  this work for additional information regarding copyright ownership.
  The ASF licenses this file to You under the Apache License, Version 2.0
  (the "License"); you may not use this file except in compliance with
  the License.  You may obtain a copy of the License at

      http://www.apache.org/licenses/LICENSE-2.0

  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.
-->
<!DOCTYPE document PUBLIC "-//APACHE//DTD Documentation V2.0//EN" "http://forrest.apache.org/dtd/document-v20.dtd">
<document>
  <header>
    <title>Developing with forrest-osgi</title>
  </header>
  <body>
    <section id="overview">
      <title>Contributions outside of Java code</title>
      <p>
        If your interests lie outside Java&#153; and all this
        OSGi&#153; stuff, this section is for you.
      </p>
      <p>
        Plugin contributors will want to start by examining the
        structure of one of the input or output plugins,
        <code>org.apache.forrest.plugin.input.xdoc</code> for
        example. This bundle, and the accompanying fragment
        <code>org.apache.forrest.plugin.input.res</code> comprise the
        Document V2.0 (xdoc) input plugin. The content type handled by
        your new plugin will be added to the list of supported formats
        which is searched to handle incoming requests. Stylesheets and
        other non-Java resources are layed out in the bundle fragment,
        the one ending in <code>.res</code> for
        <em>resources</em>. Input plugins transform the source format
        into an internal format. Output plugins transform the internal
        format into the presentation format.
      </p>
    </section>
    <section id="code">
      <title>Code contributions and features</title>
      <p>
        There are many more plugins to implement. Each one will likely
        include necessary changes to and improvements of the plugin
        API. The plugin API is very limited right now. A method to
        generate plugin skeletons has not yet been started.
      </p>
      <p>
        The code base needs to be cleaned up, refactored and
        documented. Its experimental status shows.
      </p>
    </section>
    <section id="explore">
      <title>Further exploration</title>
      <p>
        Some random notes:
      </p>
      <ul>
        <li>
          Make use of Config Admin to configure bundles
          <p>
            Config Admin is now installed and started by default, but
            nothing yet makes use of it. The Web Console expects to be
            configured this way.
          </p>
        </li>
        <li>
          Investigate Wire Admin
          <p>
            Wire Admin connects a Producer service to a Consumer
            service. This seems like a candidate for modeling the
            transformation from input to output.
          </p>
        </li>
        <li>
          <a href="ext:asfIncubator/EasyAnt">Apache EasyAnt</a>
          <p>
            Investigate EasyAnt, a hybrid of Apache Ant and Apache
            Ivy, as means to manage dependencies.
          </p>
        </li>
        <li>
          <a
          href="http://felix.apache.org/site/apache-felix-osgi-bundle-repository.html">OBR</a>
          bundle repository service from Apache Felix, for OSGi
          dependencies
          <p>
            OBR is now installed and started by default. Check it out
            in the web console
            <code>http://localhost:8080/system/console/obr</code>.
          </p>
        </li>
        <li>
          Apache Cocoon blocks, Cocoon3 components
          <p>
            Cocoon blocks are not OSGi bundles. With a plan to handle
            dependencies, they can be wrapped and used as
            bundles. Cocoon itself would also need to be wrapped.
          </p>
        </li>
        <li>
          Apache Tika
          <p>
            Investigate using Tika's content type and encoding
            detection capabilities. This could be a way to improve the
            mechanism to determine which input and output plugins to
            call. There is a Tika OSGi bundle.
          </p>
        </li>
      </ul>
    </section>
  </body>
</document>
